{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qRA8BeA,MAzBf,YAA2D,EAA3CC,GAA4C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC9C,OAAO,sBAAKC,UAAU,QAAf,UACC,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACzC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QAGjB,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gB,MCQZ,IA2EMC,E,4MACJC,MAAQ,CACNC,WAAU,EACVC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEAQAC,IAAMC,IAAI,0DARV,gBAKJJ,EALI,EAGRK,KACEA,KACEL,OAIN,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IATzB,2C,uDAYZ,WAMEQ,KAAKN,c,oBAGP,WACE,MAA8BM,KAAKT,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACA,yBAASV,UAAU,YAAnB,SACIS,EAEA,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAKF,qBAAKA,UAAU,SAAf,SACKU,EAAOP,KAAI,SAAAe,GAAK,OACf,cAAC,EAAD,CAEAxB,GAAIwB,EAAMxB,GACVC,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMC,mBACdpB,OAAQmB,EAAMnB,QANTmB,EAAMxB,e,GA3CP0B,IAAMC,WA2DTd,IC1Jfe,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.df4879db.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"./Movie.css\"\r\n\r\n\r\nfunction Movie({id, year, title, summary, poster, genres}) {\r\n    return <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n            <h3 className=\"movie__title\">{title}</h3>\r\n            <h5 className=\"movie__year\">{year}</h5>\r\n            <ul className=\"movie__genres\">\r\n                {genres.map((genre, index) => (\r\n                    <li key={index} className=\"genres__genre\">{genre}</li>\r\n                ))}\r\n            </ul>\r\n            <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title:PropTypes.string.isRequired,\r\n    summary:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired,\r\n    genres:PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport axios from 'axios';\r\nimport Movie from './Movie';\r\nimport \"./App.css\"\r\n\r\n// props.fav는 { fav } 로 쓰는 것과 같다 ( 내부에서 얻는 방식 )\r\nfunction Food({ name, picture, rating }) {\r\n  return <div>\r\n    <h1>I Like {name}</h1>\r\n    <h4>{rating}/5.0</h4>\r\n    <img src={picture} alt={name}/>\r\n  </div>\r\n}\r\n\r\n// 각 타입의 형태를 체크할 수 있음(타입이 맞지 않거나 require가 아닌 경우 콘솔창에 에러가뜸.)\r\n// 반드시 propTypes로 이름을 지어야한다. (아니면 리액트에서 알지못함.)\r\nFood.propTypes = {\r\n  name:PropTypes.string.isRequired,\r\n  picture:PropTypes.string.isRequired,\r\n  rating:PropTypes.number\r\n};\r\n\r\n// react에서 컴포넌트는 유니크해야한다. ->array가 들어올 때는 유일성을 잃어버리므로 key인 id를 추가한다.\r\nconst foodILike = [\r\n  {\r\n    id:1,\r\n    name:\"kimchi\",\r\n    image:\r\n    \"https://steemkr.com/coinkorea/@lamiru/2qflp3https://www.hwatongkimchi.com/article/%EA%B5%AC%EB%A7%A4-%ED%9B%84%EA%B8%B0/4/5378/\",\r\n    rating: 5\r\n  },\r\n  {\r\n    id:2,\r\n    name:\"samgyeopsal\",\r\n    image:\r\n    \"https://cdn.clien.net/web/api/file/F01/9415727/1f3052ec9c804.jpeg?w=780&h=30000\",\r\n    rating: 4.9\r\n  }\r\n]\r\n\r\n// function 컴포넌트\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>hello</h1>\r\n//       {/*<Food fav=\"kimchi\" /> */}\r\n//       { foodILike.map(dish => <Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating} />)}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// 클래스 컴포넌트 ()  //function이 아니기 떄문에 return이 없다.\r\n// 라이프 사이클 메소드를 가지는데 React가 컴포넌트를 생성하고 없애는 주기\r\n// mounting = 생성, updating = 업데이트, unmounting = 소멸 \r\n// className App extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     console.log(\"hello\");\r\n//   }\r\n//   // state는 오브젝트이고 컴포넌트의 data를 넣을 공간이 있고 변하는 값.\r\n//   state = {\r\n//     count: 0\r\n//   }\r\n\r\n//   add = () => {\r\n//     //this.state.count = 1;\r\n//     //this.setState({count: this.state.count + 1}); // state는 오브젝트이므로 setState는 새로운 state를 받아야하므로 {count:}를 넣어준다. (안좋은방법)\r\n//     this.setState(current => ({count: current.count + 1})); // state를 set할 때, react에서 외부의 상태에 의존하지않는 가장 좋은 방법임\r\n//   };\r\n//   minus = () => {\r\n//     //this.state.count = -1;  //이 말의 의미는 매번 state를 변경할 때 react가 render를 호출해서 바꿔주길 원한다는 뜻\r\n//     this.setState({count: this.state.count - 1}); // setState를 사용하지 않으면 새 state와 render 함수가 호출되지 않는다. (setState를 써야 re render가 됨.)\r\n//   }\r\n\r\n//   // 컴포넌트가 처음 렌더되고 난 후 호출\r\n//   componentDidMount() {\r\n//     console.log(\"component renderd\");\r\n//   }\r\n//   // setState로 re render 되었을 때 (업데이트) 호출\r\n//   componentDidUpdate() {\r\n//     console.log(\"i just update\");\r\n//   }\r\n//   // 컴포넌트가 소멸될 떄\r\n//   componentWillUnmount() {\r\n//     console.log(\"Good bye\")\r\n//   }\r\n//   // react는 자동적으로 모든 클래스 컴포넌트의 render 메소드를 실행한다.\r\n//   //자바스크립트에서는 onClick시 이벤트리스너에 등록해야하지만 리액트에서는 자동으로 onClick을 가지고 있음.\r\n//   render() {\r\n//     return (\r\n//     <div>\r\n//       <h1>The number is { this.state.count }</h1>\r\n//       <button onClick={this.add}>Add</button> \r\n//       <button onClick={this.minus}>minus</button>\r\n//     </div>\r\n//     )}\r\n// }\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    isLoading:true,\r\n    movies: [] // default를 여기 다 적을 필요없다. 어차피 setState에 새로 넣어주므로 거기서 넣어도됨\r\n  };\r\n  \r\n  // axios 항상 빠르지 않다. 기다려야하므로 async를 넣는다. (비동기처리)\r\n  getMovies = async () => {\r\n    // await을 넣으면 axios.get이 끝날 때까지 기다린다.\r\n    const {\r\n      data: {\r\n        data:{\r\n          movies\r\n        }\r\n      }\r\n    } = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json\");\r\n    this.setState({ movies, isLoading: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // setTimeout(() => {\r\n    //   this.setState(current => ({ isLoading: false}));\r\n    // }, 6000);\r\n\r\n    // data fetch는 axois\r\n    this.getMovies(); // getmovie 함수에게 가져오는 시간이 필요하다고 알려준다.\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, movies } = this.state; // ES6 문법 사용\r\n    return (\r\n    <section className=\"container\">\r\n      { isLoading ? \r\n      (\r\n        <div className=\"loader\">\r\n          <span className=\"loader__text\">Loading...</span>\r\n        </div>\r\n      ) \r\n      : \r\n      (\r\n        <div className=\"movies\">\r\n            {movies.map(movie => (\r\n              <Movie \r\n              key={movie.id}\r\n              id={movie.id} \r\n              year={movie.year} \r\n              title={movie.title} \r\n              summary={movie.summary} \r\n              poster={movie.medium_cover_image}\r\n              genres={movie.genres}  \r\n              />\r\n            ))}\r\n        </div>\r\n      )}\r\n    </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}